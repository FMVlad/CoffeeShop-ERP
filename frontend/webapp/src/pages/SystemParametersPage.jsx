import React, { useEffect, useState } from "react";
import { api } from "../api";

export default function SystemParametersPage() {
  const [params, setParams] = useState([]);
  const [newParam, setNewParam] = useState({ ParamKey: "", ParamValue: "" });
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => { 
    loadParams();
  }, []);

  const loadParams = async () => {
    try {
      setLoading(true);
      const data = await api.getSystemParameters();
      console.log('üìä –û—Ç—Ä–∏–º–∞–Ω—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:', data);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –º–∞—Å–∏–≤
      if (Array.isArray(data)) {
        setParams(data);
      } else if (data && data.error) {
        // –Ø–∫—â–æ API –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–º–∏–ª–∫—É –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        setError(`–ü–æ–º–∏–ª–∫–∞ API: ${data.error}`);
        console.log('üóÇÔ∏è –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ:', data.columns);
        console.log('üìÑ –ó—Ä–∞–∑–æ–∫ –¥–∞–Ω–∏—Ö:', data.sample_data);
        setParams(data.sample_data || []);
      } else {
        setParams([]);
      }
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:', err);
      setError(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${err.message}`);
      setParams([]);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (id, key, value) => {
    setParams(params.map(p => p.ID === id ? { ...p, [key]: value } : p));
  };
  
  const handleUpdate = async (id, param) => {
    try {
    await api.updateSystemParameter(id, param);
    setMessage("–ó–Ω–∞—á–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
    setTimeout(() => setMessage(""), 1200);
      loadParams();
    } catch (err) {
      setError(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${err.message}`);
    }
  };
  
  const handleDelete = async (id) => {
    if (window.confirm("–í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä?")) {
      try {
      await api.deleteSystemParameter(id);
        loadParams();
      } catch (err) {
        setError(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ${err.message}`);
      }
    }
  };
  
  const handleAdd = async () => {
    if (!newParam.ParamKey.trim()) return;
    try {
    await api.addSystemParameter(newParam);
    setNewParam({ ParamKey: "", ParamValue: "" });
    setMessage("–î–æ–¥–∞–Ω–æ!");
    setTimeout(() => setMessage(""), 1200);
      loadParams();
    } catch (err) {
      setError(`–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: ${err.message}`);
    }
  };

  if (loading) {
    return (
      <div style={{ marginLeft: 240, padding: 32 }}>
        <h2>–°–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h2>
        <div>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
      </div>
    );
  }

  return (
    <div style={{ marginLeft: 240, padding: 32, maxWidth: 650 }}>
      <h2>–°–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h2>
      
      {error && (
        <div style={{ 
          color: "#d63384", 
          background: "#f8d7da", 
          padding: 12, 
          borderRadius: 6, 
          marginBottom: 16,
          border: "1px solid #f5c2c7"
        }}>
          ‚ö†Ô∏è {error}
        </div>
      )}
      
      {message && (
        <div style={{ 
          color: "#0f5132", 
          background: "#d1e7dd", 
          padding: 12, 
          borderRadius: 6, 
          marginBottom: 16,
          border: "1px solid #badbcc"
        }}>
          ‚úÖ {message}
        </div>
      )}
      
      <table border={1} cellPadding={8} style={{ fontSize: 16, background: "#fff", marginBottom: 24, minWidth: 450 }}>
        <thead>
          <tr>
            <th>–ö–ª—é—á (param)</th>
            <th>–ó–Ω–∞—á–µ–Ω–Ω—è (value)</th>
            <th>–î—ñ—ó</th>
          </tr>
        </thead>
        <tbody>
          {params.map(param => (
            <tr key={param.ID}>
              <td>
                <input
                  value={param.ParamKey || param.ParameterKey || ""}
                  onChange={e => handleChange(param.ID, "ParamKey", e.target.value)}
                  style={{ width: 180 }}
                  disabled // –ö–ª—é—á –∫—Ä–∞—â–µ –Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏!
                />
              </td>
              <td>
                <input
                  value={param.ParamValue || param.ParameterValue || ""}
                  onChange={e => handleChange(param.ID, "ParamValue", e.target.value)}
                  style={{ width: 320 }}
                />
              </td>
              <td>
                <button onClick={() => handleUpdate(param.ID, param)}>üíæ –ó–±–µ—Ä–µ–≥—Ç–∏</button>
                <button onClick={() => handleDelete(param.ID)} style={{ marginLeft: 8, color: "red" }}>üóë –í–∏–¥–∞–ª–∏—Ç–∏</button>
              </td>
            </tr>
          ))}
          <tr>
            <td>
              <input
                value={newParam.ParamKey}
                placeholder="–ù–æ–≤–∏–π –∫–ª—é—á"
                onChange={e => setNewParam({ ...newParam, ParamKey: e.target.value })}
                style={{ width: 180 }}
              />
            </td>
            <td>
              <input
                value={newParam.ParamValue}
                placeholder="–ó–Ω–∞—á–µ–Ω–Ω—è"
                onChange={e => setNewParam({ ...newParam, ParamValue: e.target.value })}
                style={{ width: 320 }}
              />
            </td>
            <td>
              <button onClick={handleAdd}>‚ûï –î–æ–¥–∞—Ç–∏</button>
            </td>
          </tr>
        </tbody>
      </table>
      
      <div style={{fontSize: 14, color: "#888"}}>
        –ü—Ä–∏–∫–ª–∞–¥: <br/>
        <b>PhotoPath</b> ‚Äî —à–ª—è—Ö –¥–æ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—ñ–≤ <br/>
        <b>TelegramToken</b> ‚Äî —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ <br/>
        <b>PrinterName</b> ‚Äî –ø—Ä–∏–Ω—Ç–µ—Ä —Ä–æ–±–æ—á–æ–≥–æ –º—ñ—Å—Ü—è
      </div>
    </div>
  );
}
