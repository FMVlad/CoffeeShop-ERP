from fastapi import APIRouter, Depends, HTTPException, Query, Request, UploadFile, File
from app.db_connection import get_db
import os
import shutil
import uuid
from PIL import Image
import io

router = APIRouter()

@router.get("/api/products")
def get_products(db=Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("SELECT * FROM Products ORDER BY ID DESC")
    columns = [col[0] for col in cursor.description]
    return [dict(zip(columns, row)) for row in cursor.fetchall()]

@router.get("/api/products/{id}")
def get_product(id: int, db=Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("SELECT * FROM Products WHERE ID = ?", (id,))
    columns = [col[0] for col in cursor.description]
    row = cursor.fetchone()
    if row:
        return dict(zip(columns, row))
    raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

@router.post("/api/upload-image")
async def upload_image(file: UploadFile = File(...), db=Depends(get_db)):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º —ñ–º'—è–º"""
    print(f"üì§ –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–∞–π–ª: {file.filename}, —Ç–∏–ø: {file.content_type}")
    
    if not file.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞–ø–∫—É uploads –Ω–∞–ø—Ä—è–º—É
    photo_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "uploads")
    print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {photo_dir}")
    os.makedirs(photo_dir, exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
    file_extension = os.path.splitext(file.filename)[1] or '.jpg'
    unique_filename = f"{uuid.uuid4()}{file_extension}"
    file_path = os.path.join(photo_dir, unique_filename)
    print(f"üíæ –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {file_path}")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
    try:
        with open(file_path, "wb") as buffer:
            content = await file.read()
            print(f"üìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {len(content)} –±–∞–π—Ç")
            buffer.write(content)
        
        print(f"‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {unique_filename}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
        if os.path.exists(file_path):
            print(f"‚úÖ –§–∞–π–ª –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: {file_path}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {file_path}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
    
    return {"message": "–§–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", "filename": unique_filename}

@router.post("/api/products")
def create_product(data: dict, db=Depends(get_db)):
    cursor = db.cursor()
    columns = list(data.keys())
    values = list(data.values())
    placeholders = ', '.join(['?' for _ in values])
    column_list = ', '.join(columns)
    
    query = f"INSERT INTO Products ({column_list}) VALUES ({placeholders})"
    print(f"üîç SQL –∑–∞–ø–∏—Ç: {query}")
    print(f"üìä –ó–Ω–∞—á–µ–Ω–Ω—è: {values}")
    
    cursor.execute(query, values)
    db.commit()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
    new_id = cursor.lastrowid
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä –∑ ID: {new_id}")
    
    return {"message": "–¢–æ–≤–∞—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ!", "id": new_id}

@router.put("/api/products/{id}")
def update_product(id: int, data: dict, db=Depends(get_db)):
    cursor = db.cursor()
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ SET —á–∞—Å—Ç–∏–Ω—É –∑–∞–ø–∏—Ç—É
    set_clauses = []
    values = []
    for key, value in data.items():
        set_clauses.append(f"{key} = ?")
        values.append(value)
    
    set_clause = ', '.join(set_clauses)
    query = f"UPDATE Products SET {set_clause} WHERE ID = ?"
    values.append(id)
    
    print(f"üîç SQL –∑–∞–ø–∏—Ç: {query}")
    print(f"üìä –ó–Ω–∞—á–µ–Ω–Ω—è: {values}")
    
    cursor.execute(query, values)
    db.commit()

    return {"message": "–¢–æ–≤–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ!"}

@router.delete("/api/products/{id}")
def delete_product(id: int, db=Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("DELETE FROM Products WHERE ID = ?", (id,))
    db.commit()
    return {"message": "–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ!"}

def create_preview(image_path, preview_path, size=(200, 200)):
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–µ–≤'—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    try:
        with Image.open(image_path) as img:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–µ–≤'—é –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
            img.thumbnail(size, Image.Resampling.LANCZOS)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –±—ñ–ª–∏–π —Ñ–æ–Ω
            background = Image.new('RGB', size, (255, 255, 255))
            
            # –¶–µ–Ω—Ç—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            offset = ((size[0] - img.size[0]) // 2, (size[1] - img.size[1]) // 2)
            background.paste(img, offset)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–µ–≤'—é
            background.save(preview_path, 'JPEG', quality=85)
            print(f"‚úÖ –ü—Ä–µ–≤'—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: {preview_path}")
            return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–≤'—é: {e}")
        return False

@router.post("/api/products/{id}/upload-photo")
async def upload_product_photo(id: int, file: UploadFile = File(...), db=Depends(get_db)):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –ø—Ä–µ–≤'—é"""
    print(f"üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É ID: {id}")
    
    if not file.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º")
    
    cursor = db.cursor()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö–∏ –∑ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    cursor.execute("SELECT ParamKey, ParamValue FROM SystemParameters WHERE ParamKey IN ('PhotoPath', 'PreviewPath')")
    params = {row[0]: row[1] for row in cursor.fetchall()}
    
    photo_path = params.get('PhotoPath')
    preview_path = params.get('PreviewPath')
    
    if not photo_path:
        raise HTTPException(status_code=500, detail="PhotoPath –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
    
    if not preview_path:
        raise HTTPException(status_code=500, detail="PreviewPath –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫–∏ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
    os.makedirs(photo_path, exist_ok=True)
    os.makedirs(preview_path, exist_ok=True)
    
    # –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É = ID —Ç–æ–≤–∞—Ä—É
    filename = f"{id}.jpg"
    full_photo_path = os.path.join(photo_path, filename)
    full_preview_path = os.path.join(preview_path, filename)
    
    try:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ
        content = await file.read()
        with open(full_photo_path, "wb") as buffer:
            buffer.write(content)
        
        print(f"‚úÖ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {full_photo_path}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–µ–≤'—é
        if create_preview(full_photo_path, full_preview_path):
            print(f"‚úÖ –ü—Ä–µ–≤'—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: {full_preview_path}")
        else:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–µ–≤'—é, –∞–ª–µ –æ—Å–Ω–æ–≤–Ω–µ —Ñ–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å —É –±–∞–∑—ñ
        cursor.execute("UPDATE Products SET Photo = ? WHERE ID = ?", (filename, id))
        db.commit()
        
        print(f"‚úÖ –ó–∞–ø–∏—Å —É –±–∞–∑—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ: Photo = {filename}")
        
        return {
            "message": "–§–æ—Ç–æ —Ç–∞ –ø—Ä–µ–≤'—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", 
            "filename": filename,
            "photo_path": full_photo_path,
            "preview_path": full_preview_path
        }
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")

@router.get("/api/manufacturers")
def get_manufacturers(db=Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("SELECT ID, ManufacturerName FROM Manufacturers ORDER BY ManufacturerName")
    return [{"ID": row[0], "ManufacturerName": row[1]} for row in cursor.fetchall()] 