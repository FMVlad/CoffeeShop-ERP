from fastapi import APIRouter, Depends, HTTPException, UploadFile, File, Body
from app.db_connection import get_db
import os
import uuid
from PIL import Image

router = APIRouter()

def generate_ean13_barcode(db, barcode_prefix):
    """–ì–µ–Ω–µ—Ä—É—î EAN13 —à—Ç—Ä–∏—Ö–∫–æ–¥ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º"""
    cursor = db.cursor()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –Ω–æ–º–µ—Ä —à—Ç—Ä–∏—Ö–∫–æ–¥—É
    cursor.execute("SELECT ParamValue FROM SystemParameters WHERE ParamKey = 'BarcodeNum'")
    result = cursor.fetchone()
    
    if result and result[0]:
        barcode_num = int(result[0])
    else:
        # –Ø–∫—â–æ BarcodeNum –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –ø–æ—á–Ω–µ–º–æ –∑ 1
        barcode_num = 1
    
    while True:
        # –î–∏–Ω–∞–º—ñ—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏—Ñ—Ä –¥–ª—è –Ω–æ–º–µ—Ä–∞
        num_digits = 12 - len(barcode_prefix)
        barcode_without_checksum = f"{barcode_prefix}{barcode_num:0{num_digits}d}"
        
        # –û–±—á–∏—Å–ª—é—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É —Å—É–º—É EAN13
        odd_sum = sum(int(barcode_without_checksum[i]) for i in range(0, 12, 2))
        even_sum = sum(int(barcode_without_checksum[i]) for i in range(1, 12, 2))
        total = odd_sum + (even_sum * 3)
        checksum = (10 - (total % 10)) % 10
        
        # –ü–æ–≤–Ω–∏–π —à—Ç—Ä–∏—Ö–∫–æ–¥
        full_barcode = barcode_without_checksum + str(checksum)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å
        cursor.execute("SELECT COUNT(*) FROM Products WHERE Barcode = ?", (full_barcode,))
        exists = cursor.fetchone()[0]
        if not exists:
            break
        barcode_num += 1
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    cursor.execute("UPDATE SystemParameters SET ParamValue = ? WHERE ParamKey = 'BarcodeNum'", 
                  (str(barcode_num + 1),))
    
    print(f"üè∑Ô∏è –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —à—Ç—Ä–∏—Ö–∫–æ–¥: {full_barcode} (–Ω–æ–º–µ—Ä: {barcode_num})")
    
    return full_barcode

@router.get("/products")
def get_products(db=Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("SELECT * FROM Products ORDER BY ID DESC")
    columns = [col[0] for col in cursor.description]
    return [dict(zip(columns, row)) for row in cursor.fetchall()]

@router.get("/products/{id}")
def get_product(id: int, db=Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("SELECT * FROM Products WHERE ID = ?", (id,))
    columns = [col[0] for col in cursor.description]
    row = cursor.fetchone()
    if row:
        return dict(zip(columns, row))
    raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

@router.post("/upload-image")
async def upload_image(file: UploadFile = File(...), db=Depends(get_db)):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º —ñ–º'—è–º"""
    print(f"üì§ –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–∞–π–ª: {file.filename}, —Ç–∏–ø: {file.content_type}")
    
    if not file.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞–ø–∫—É uploads –Ω–∞–ø—Ä—è–º—É
    photo_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "uploads")
    print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {photo_dir}")
    os.makedirs(photo_dir, exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
    file_extension = os.path.splitext(file.filename)[1] or '.jpg'
    unique_filename = f"{uuid.uuid4()}{file_extension}"
    file_path = os.path.join(photo_dir, unique_filename)
    print(f"üíæ –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {file_path}")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
    try:
        with open(file_path, "wb") as buffer:
            content = await file.read()
            print(f"üìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {len(content)} –±–∞–π—Ç")
            buffer.write(content)
        
        print(f"‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {unique_filename}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
        if os.path.exists(file_path):
            print(f"‚úÖ –§–∞–π–ª –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: {file_path}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {file_path}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
    
    return {"message": "–§–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", "filename": unique_filename}

@router.post("/products")
def create_product(data: dict, db=Depends(get_db)):
    cursor = db.cursor()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —à—Ç—Ä–∏—Ö–∫–æ–¥—É —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ
    if not data.get('Barcode') or data.get('Barcode').strip() == '':
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å –∑ BarcodePrefix –ø–∞—Ä–∞–º–µ—Ç—Ä—É
            cursor.execute("SELECT ParamValue FROM SystemParameters WHERE ParamKey = 'BarcodePrefix'")
            prefix_result = cursor.fetchone()
            
            if not prefix_result or not prefix_result[0]:
                print("‚ö†Ô∏è BarcodePrefix –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —à—Ç—Ä–∏—Ö–∫–æ–¥—É")
                data['Barcode'] = ""  # –ó–∞–ª–∏—à–∞—î–º–æ –ø—É—Å—Ç–∏–º
            else:
                prefix = prefix_result[0]
                data['Barcode'] = generate_ean13_barcode(db, prefix)
                print(f"üè∑Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —à—Ç—Ä–∏—Ö–∫–æ–¥: {data['Barcode']} (–ø—Ä–µ—Ñ—ñ–∫—Å: {prefix})")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —à—Ç—Ä–∏—Ö–∫–æ–¥—É: {e}, –∑–∞–ª–∏—à–∞—î–º–æ –ø—É—Å—Ç–∏–º")
            data['Barcode'] = ""  # –ó–∞–ª–∏—à–∞—î–º–æ –ø—É—Å—Ç–∏–º —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    
    columns = list(data.keys())
    values = list(data.values())
    placeholders = ', '.join(['?' for _ in values])
    column_list = ', '.join(columns)
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ OUTPUT INSERTED.ID –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ ID
    query = f"INSERT INTO Products ({column_list}) OUTPUT INSERTED.ID VALUES ({placeholders})"
    print(f"üîç SQL –∑–∞–ø–∏—Ç: {query}")
    print(f"üìä –ó–Ω–∞—á–µ–Ω–Ω—è: {values}")
    
    cursor.execute(query, values)
    new_id = cursor.fetchone()[0]  # –û—Ç—Ä–∏–º—É—î–º–æ ID –∑ OUTPUT
    db.commit()
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä –∑ ID: {new_id}")
    
    return {"message": "–¢–æ–≤–∞—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ!", "id": int(new_id), "barcode": data.get('Barcode')}

@router.put("/products/{id}")
def update_product(id: int, data: dict, db=Depends(get_db)):
    cursor = db.cursor()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —à—Ç—Ä–∏—Ö–∫–æ–¥—É —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ (–ü–†–ò –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ü –¢–ê–ö–û–ñ!)
    if not data.get('Barcode') or data.get('Barcode').strip() == '':
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å –∑ BarcodePrefix –ø–∞—Ä–∞–º–µ—Ç—Ä—É
            cursor.execute("SELECT ParamValue FROM SystemParameters WHERE ParamKey = 'BarcodePrefix'")
            prefix_result = cursor.fetchone()
            
            if not prefix_result or not prefix_result[0]:
                print("‚ö†Ô∏è BarcodePrefix –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —à—Ç—Ä–∏—Ö–∫–æ–¥—É")
                data['Barcode'] = ""  # –ó–∞–ª–∏—à–∞—î–º–æ –ø—É—Å—Ç–∏–º
            else:
                prefix = prefix_result[0]
                data['Barcode'] = generate_ean13_barcode(db, prefix)
                print(f"üè∑Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —à—Ç—Ä–∏—Ö–∫–æ–¥ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: {data['Barcode']} (–ø—Ä–µ—Ñ—ñ–∫—Å: {prefix})")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —à—Ç—Ä–∏—Ö–∫–æ–¥—É: {e}, –∑–∞–ª–∏—à–∞—î–º–æ –ø—É—Å—Ç–∏–º")
            data['Barcode'] = ""  # –ó–∞–ª–∏—à–∞—î–º–æ –ø—É—Å—Ç–∏–º —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ SET —á–∞—Å—Ç–∏–Ω—É –∑–∞–ø–∏—Ç—É
    set_clauses = []
    values = []
    for key, value in data.items():
        set_clauses.append(f"{key} = ?")
        values.append(value)
    
    set_clause = ', '.join(set_clauses)
    query = f"UPDATE Products SET {set_clause} WHERE ID = ?"
    values.append(id)
    
    print(f"üîç SQL –∑–∞–ø–∏—Ç: {query}")
    print(f"üìä –ó–Ω–∞—á–µ–Ω–Ω—è: {values}")
    
    cursor.execute(query, values)
    db.commit()

    return {"message": "–¢–æ–≤–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ!", "barcode": data.get('Barcode')}

@router.delete("/products/{id}")
def delete_product(id: int, db=Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("DELETE FROM Products WHERE ID = ?", (id,))
    db.commit()
    return {"message": "–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ!"}

def create_preview(image_path, preview_path, size=(200, 200)):
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–µ–≤'—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    try:
        with Image.open(image_path) as img:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–µ–≤'—é –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
            img.thumbnail(size, Image.Resampling.LANCZOS)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –±—ñ–ª–∏–π —Ñ–æ–Ω
            background = Image.new('RGB', size, (255, 255, 255))
            
            # –¶–µ–Ω—Ç—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            offset = ((size[0] - img.size[0]) // 2, (size[1] - img.size[1]) // 2)
            background.paste(img, offset)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–µ–≤'—é
            background.save(preview_path, 'JPEG', quality=85)
            print(f"‚úÖ –ü—Ä–µ–≤'—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: {preview_path}")
            return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–≤'—é: {e}")
        return False

@router.post("/products/{id}/upload-photo")
async def upload_product_photo(id: int, file: UploadFile = File(...), db=Depends(get_db)):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –ø—Ä–µ–≤'—é"""
    print(f"üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É ID: {id}")
    
    if not file.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º")
    
    cursor = db.cursor()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö–∏ –∑ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    cursor.execute("SELECT ParamKey, ParamValue FROM SystemParameters WHERE ParamKey IN ('PhotoPath', 'PreviewPath')")
    params = {row[0]: row[1] for row in cursor.fetchall()}
    
    photo_path = params.get('PhotoPath')
    preview_path = params.get('PreviewPath')
    
    if not photo_path:
        raise HTTPException(status_code=500, detail="PhotoPath –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
    
    if not preview_path:
        raise HTTPException(status_code=500, detail="PreviewPath –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫–∏ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
    os.makedirs(photo_path, exist_ok=True)
    os.makedirs(preview_path, exist_ok=True)
    
    # –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É = ID —Ç–æ–≤–∞—Ä—É
    filename = f"{id}.jpg"
    full_photo_path = os.path.join(photo_path, filename)
    full_preview_path = os.path.join(preview_path, filename)
    
    try:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ
        content = await file.read()
        with open(full_photo_path, "wb") as buffer:
            buffer.write(content)
        
        print(f"‚úÖ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {full_photo_path}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–µ–≤'—é
        if create_preview(full_photo_path, full_preview_path):
            print(f"‚úÖ –ü—Ä–µ–≤'—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: {full_preview_path}")
        else:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–µ–≤'—é, –∞–ª–µ –æ—Å–Ω–æ–≤–Ω–µ —Ñ–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å —É –±–∞–∑—ñ
        cursor.execute("UPDATE Products SET Photo = ? WHERE ID = ?", (filename, id))
        db.commit()
        
        print(f"‚úÖ –ó–∞–ø–∏—Å —É –±–∞–∑—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ: Photo = {filename}")
        
        return {
            "message": "–§–æ—Ç–æ —Ç–∞ –ø—Ä–µ–≤'—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", 
            "filename": filename,
            "photo_path": full_photo_path,
            "preview_path": full_preview_path
        }
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")

@router.get("/manufacturers")
def get_manufacturers(db=Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("SELECT ID, Name FROM Manufacturers ORDER BY Name")
    return [{"ID": row[0], "ManufacturerName": row[1]} for row in cursor.fetchall()]

@router.get("/products/{id}/attributes")
def get_product_attributes(id: int, db=Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("SELECT FieldID, AttrValue FROM ProductAttributes WHERE ProductID = ?", (id,))
    return [{"FieldID": row[0], "Value": row[1]} for row in cursor.fetchall()]

@router.post("/products/{id}/attributes")
def save_product_attributes(id: int, attributes: list = Body(...), db=Depends(get_db)):
    print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É {id}: {attributes}")
    cursor = db.cursor()
    for attr in attributes:
        field_id = attr.get("FieldID")
        value = attr.get("Value")
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î —Ç–∞–∫–∏–π –∑–∞–ø–∏—Å
        cursor.execute("SELECT ID FROM ProductAttributes WHERE ProductID = ? AND FieldID = ?", (id, field_id))
        row = cursor.fetchone()
        if row:
            cursor.execute("UPDATE ProductAttributes SET AttrValue = ? WHERE ID = ?", (value, row[0]))
        else:
            cursor.execute("INSERT INTO ProductAttributes (ProductID, FieldID, AttrValue) VALUES (?, ?, ?)", (id, field_id, value))
    db.commit()
    return {"message": "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!"}

@router.get("/products/{id}/fullname")
def get_product_fullname(id: int, db=Depends(get_db)):
    cursor = db.cursor()
    # 1. –ü—ñ–¥—Ç—è–≥—É—î–º–æ —Ç–æ–≤–∞—Ä
    cursor.execute("SELECT * FROM Products WHERE ID = ?", (id,))
    product = cursor.fetchone()
    if not product:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    product_columns = [col[0] for col in cursor.description]
    product_dict = dict(zip(product_columns, product))
    # 2. –ü—ñ–¥—Ç—è–≥—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    cursor.execute("SELECT FieldID, AttrValue FROM ProductAttributes WHERE ProductID = ?", (id,))
    attr_dict = {row[0]: row[1] for row in cursor.fetchall()}
    # 3. –ü—ñ–¥—Ç—è–≥—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏
    cursor.execute("SELECT SqlName, DisplayOrder, IsIncluded, FieldID FROM ProductFullNameFields WHERE IsIncluded = 1 ORDER BY DisplayOrder")
    rules = cursor.fetchall()
    # 4. –ü—ñ–¥—Ç—è–≥—É—î–º–æ –≤—Å—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –º–∞–ø–∏ FieldID ‚Üí SqlName
    cursor.execute("SELECT ID, SqlName FROM ProductCardTemplateFields")
    field_map = {row[0]: row[1] for row in cursor.fetchall()}
    # 5. –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É
    parts = []
    for rule in rules:
        sql_name, _, _, field_id = rule
        value = None
        if sql_name in product_dict:
            value = product_dict[sql_name]
            # –Ø–∫—â–æ —Ü–µ ManufacturerID ‚Äî –ø—ñ–¥—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É –≤–∏—Ä–æ–±–Ω–∏–∫–∞
            if sql_name.lower() == "manufacturerid" and value:
                cursor.execute("SELECT Name, Country FROM Manufacturers WHERE ID = ?", (value,))
                man = cursor.fetchone()
                if man:
                    value = f"{man[0]} ({man[1]})" if man[1] else man[0]
        elif field_id and field_id in attr_dict:
            value = attr_dict[field_id]
        elif field_id and field_id in field_map:
            value = ''
        if value:
            parts.append(str(value))
    fullname = ' '.join(parts)
    return {"FullName": fullname}

@router.post("/products/refresh-fullnames")
def refresh_fullnames(db=Depends(get_db)):
    cursor = db.cursor()
    # –ü—ñ–¥—Ç—è–≥—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
    cursor.execute("SELECT ID FROM Products")
    product_ids = [row[0] for row in cursor.fetchall()]
    updated = 0
    for pid in product_ids:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        fullname = get_product_fullname(pid, db)["FullName"]
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ FullName —É Products (—è–∫—â–æ —Ç–∞–∫–µ —î)
        try:
            cursor.execute("UPDATE Products SET FullName = ? WHERE ID = ?", (fullname, pid))
            updated += 1
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ FullName –¥–ª—è —Ç–æ–≤–∞—Ä—É {pid}: {e}")
    db.commit()
    return {"message": f"–û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É —É {updated} —Ç–æ–≤–∞—Ä—ñ–≤!"} 